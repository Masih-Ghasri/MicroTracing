# config/logstash/pipeline/logstash.conf
input {
  beats {
    port => 5044
  }

  # If you want to accept logs directly via HTTP
  http {
    port => 8080
  }
}

filter {
  if [fields][service] {
    mutate {
      add_field => { "service_name" => "%{[fields][service]}" }
    }
  }

  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }

  # Add timestamp if not present
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Enhance trace correlation
  if [trace_id] {
    mutate {
      add_field => { "trace_context" => "trace_id:%{trace_id}" }
    }
    if [span_id] {
      mutate {
        update => { "trace_context" => "trace_id:%{trace_id},span_id:%{span_id}" }
      }
    }
  }

  # Categorize by action
  if [action] {
    if [action] =~ /_error$/ {
      mutate {
        add_field => { "category" => "error" }
        add_field => { "alert_level" => "warning" }
      }
    } else if [action] =~ /_success$/ {
      mutate {
        add_field => { "category" => "success" }
        add_field => { "alert_level" => "info" }
      }
    } else {
      mutate {
        add_field => { "category" => "info" }
        add_field => { "alert_level" => "info" }
      }
    }
  }

  # Performance metrics categorization
  if [duration_ms] {
    if [duration_ms] > 1000 {
      mutate {
        add_field => { "performance_category" => "slow" }
      }
    } else if [duration_ms] > 500 {
      mutate {
        add_field => { "performance_category" => "medium" }
      }
    } else {
      mutate {
        add_field => { "performance_category" => "fast" }
      }
    }
  }

  if [queue_latency_ms] {
    if [queue_latency_ms] > 5000 {
      mutate {
        add_field => { "queue_health" => "poor" }
      }
    } else if [queue_latency_ms] > 1000 {
      mutate {
        add_field => { "queue_health" => "moderate" }
      }
    } else {
      mutate {
        add_field => { "queue_health" => "good" }
      }
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "microservice-logs-%{+YYYY.MM.dd}"
    template_name => "microservice-template"
    template => "/usr/share/logstash/templates/microservice-template.json"
    template_overwrite => true
  }

  # Debug output - remove in production
  stdout {
    codec => rubydebug
  }
}